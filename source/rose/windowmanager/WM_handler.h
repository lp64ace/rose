#ifndef WM_HANDLER_H
#define WM_HANDLER_H

#include "LIB_listbase.h"
#include "LIB_utildefines.h"

#include "WM_event.h"

#ifdef __cplusplus
extern "C" {
#endif

struct rContext;
struct wmEvent;

/* -------------------------------------------------------------------- */
/** \name Data Structures
 * \{ */

typedef struct wmEvent {
	struct wmEvent *prev, *next;

	int type;
	int flag;

	int value;			 // Indicates the operation, press, release, etc.
	int mouse_xy[2];	 // Mouse pointer position, window client coord.
	int mouse_local[2];	 // Region relative mouse position.
	int modifier;		 // The currently pressed modifier keys.
	char input[4];

	// event state information

	int prev_type;	 // The previous value of `wmEvent.type`.
	int prev_value;	 // The previous value of `wmEvent.value`.
	int prev_xy[2];	 // The previous value of `wmEvent.xy`, updated per motion.

	// event state information, since the last `wmEvent.value == KM_PRESS`.

	int prev_press_type;	  // The value of `wmEvent.type` when `wmEvent.value == KM_PRESS`.
	int prev_press_xy[2];	  // The value of `wmEvent.xy` when `wmEvent.value == KM_PRESS`.
	int prev_press_modifier;  // The value of `wmEvent.modifier` when `wmEvent.value == KM_PRESS`.
} wmEvent;

/** #wmEvent->flag */
enum {
	/**
	 * Indicates that this event was generated by auto-repeat,
	 * note that this must only ever be set for keyboard events `ISKEYBOARD(event->type) == true`.
	 */
	WM_EVENT_IS_REPEAT = 1 << 0,
};

/** #wmEvent->value */
enum {
	KM_ANY = -1,
	KM_NOTHING = 0,
	KM_PRESS = 1,
	KM_RELEASE = 2,
	KM_CLICK = 3,
	KM_DBL_CLICK = 3,
	/**
	 * \note The cursor location at the point dragging start is set to #wmEvent->old.[xy]
	 *
	 */
	KM_CLICK_DRAG = 5,
};

/** #wmEvent->modifier */
enum {
	KM_SHIFT = 1 << 0,
	KM_CTRL = 1 << 1,
	KM_ALT = 1 << 2,
	KM_OSKEY = 1 << 3,
};

/** \} */

/* -------------------------------------------------------------------- */
/** \name Main Methods
 * \{ */

void WM_do_handlers(struct rContext *C);

/** \} */

#ifdef __cplusplus
}
#endif

#endif	// WM_HANDLER_H
